Для данного проекта используется MySQL 8.0
SQL-скрипты выполняются в клиенте DBeaver


1) В данном проекте описывается База Данных для соцсети Instagram. Основная сущность, которую данная данная БД описывает - пользователь (user). Также в данной БД описаны прочие сущности, необходимые для работы приложения (см. таблицыв пункте №2). 

2) В базе данных instagram 10 таблиц:

	- users
	- profiles
	- messages
	- subscription
	- subscription_statuses
	- media
	- media_types
	- likes
	- target_types
	- posts


3) Скрипты по созданию структуры БД

-- Создаем БД

CREATE DATABASE instagram;

-- Делаем БД instagram активной

USE instagram;

-- Создаем все таблицы описанные в пункте №2

-- Таблица пользователей, необходима для регистрации

CREATE TABLE users (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	first_name  VARCHAR(100) NOT NULL,
	last_name VARCHAR(100) NOT NULL,
	email VARCHAR(100) NOT NULL UNIQUE,
	phone VARCHAR(100) NOT NULL UNIQUE,
	created_at DATETIME DEFAULT NOW(),
	updated_at DATETIME DEFAULT NOW() ON UPDATE NOW()
);

-- Таблица профилей, необходима для просмотра информации по пользователям

CREATE TABLE profiles (
	user_id INT UNSIGNED NOT NULL PRIMARY KEY,
	gender CHAR(1),
	birthday DATE,
	city VARCHAR(100),
	country VARCHAR(100),
	photo_id INT UNSIGNED,
	created_at DATETIME DEFAULT NOW(),
	updated_at DATETIME DEFAULT NOW() ON UPDATE NOW()
);

-- Таблица сообщений, описывающая отправление сообщений между пользователями

CREATE TABLE messages (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	from_user_id INT UNSIGNED NOT NULL,
	to_user_id INT UNSIGNED NOT NULL,
	body TEXT NOT NULL,
	is_important BOOLEAN,
	is_delivered BOOLEAN,
	created_at DATETIME DEFAULT NOW()
);

-- Таблица подписок, описывающая систему подписок между пользователями

CREATE TABLE subscription (
	user_id INT UNSIGNED NOT NULL,
	subscriber_id INT UNSIGNED NOT NULL,
	status_id INT UNSIGNED NOT NULL,
	requested_at DATETIME DEFAULT NOW(),
	confirmed_at DATETIME,
	PRIMARY KEY (user_id, subscriber_id)
);

-- Таблица статусов подписок, описывающая в каком состоянии находится подписка ("действующая", "отклоненная", "неподтвержденная")

CREATE TABLE subscription_statuses (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(150) NOT NULL UNIQUE
);

-- Таблица медиа-файлов, для записи информации по каждому медиа-файлу

CREATE TABLE media (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	media_type_id INT UNSIGNED NOT NULL,
	user_id INT UNSIGNED NOT NULL,
	filename VARCHAR(255) NOT NULL,
	size INT NOT NULL,
	metadata JSON,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Таблица типов медиа-файлов: Photo, Video, GIF

CREATE TABLE media_types (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255) NOT NULL UNIQUE
);

-- Таблица постов, описывает информацию по каждому сделанному посту

CREATE TABLE posts (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	user_id INT UNSIGNED NOT NULL,
	body TEXT NOT NULL,
	media_id INT UNSIGNED,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Таблица лайков, описывает информацию по каждому сделанному лайку

CREATE TABLE likes (
	id INT UNSIGNED NOT NULL PRIMARY KEY,
	user_id INT UNSIGNED NOT NULL,
	target_id INT UNSIGNED NOT NULL,
	target_type_id INT UNSIGNED NOT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Таблица описывающая тип цели лайка: медиа-файл, сообщение, пост, пользователь

CREATE TABLE target_types (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255) NOT NULL UNIQUE
);


-- Прописываем все внешние ключи

DESC profiles;

ALTER TABLE profiles 
	ADD CONSTRAINT profiles_user_id_fk 
		FOREIGN KEY (user_id) REFERENCES users(id),	
	ADD CONSTRAINT profiles_photo_id_fk 
		FOREIGN KEY (photo_id) REFERENCES media(id);
	
DESC messages ;

ALTER TABLE messages 
	ADD CONSTRAINT messages_from_user_id_fk 
		FOREIGN KEY (from_user_id) REFERENCES users(id),	
	ADD CONSTRAINT messages_to_user_id_fk 
		FOREIGN KEY (to_user_id) REFERENCES users(id);
	
DESC subscription ;
DESC subscription_statuses;
ALTER TABLE subscription 
	ADD CONSTRAINT subscription_user_id_fk 
		FOREIGN KEY (user_id) REFERENCES users(id),	
	ADD CONSTRAINT subscription_subscriber_id_fk
		FOREIGN KEY (subscriber_id) REFERENCES users(id),
	ADD CONSTRAINT subscription_status_id_fk
		FOREIGN KEY (status_id) REFERENCES subscription_statuses(id);

	
DESC media ;
DESC media_types ;
	ALTER TABLE media 
	ADD CONSTRAINT media_user_id_fk 
		FOREIGN KEY (user_id) REFERENCES users(id),	
	ADD CONSTRAINT media_media_type_id_fk 
		FOREIGN KEY (media_type_id) REFERENCES media_types (id);
	

DESC likes;
DESC target_types;
ALTER TABLE likes
	ADD CONSTRAINT likes_user_id_fk 
		FOREIGN KEY (user_id) REFERENCES users(id),	
	ADD CONSTRAINT likes_target_type_id_fk 
		FOREIGN KEY (target_type_id) REFERENCES target_types(id);
	
DESC posts;
ALTER TABLE posts
	ADD CONSTRAINT posts_user_id_fk 
		FOREIGN KEY (user_id) REFERENCES users(id),	
	ADD CONSTRAINT posts_media_id_fk 
		FOREIGN KEY (media_id) REFERENCES media(id);


-- Прописываем индексы по наиболее объемным таблицам базы данных и частыми обращениями к ним.

CREATE INDEX users_first_name_last_name_idx ON users (first_name, last_name); -- Поиск человека по имени и фамилии (сотни миллионов пользователей в реальной соцсети)
CREATE INDEX media_filename_idx ON media (filename); -- Поиск медиафайла (миллиарды медиафайлов в реальной соцсети)
CREATE INDEX likes_user_id_target_id_idx ON likes(user_id, target_id); -- Поиск по таблице лайков (миллиарды лайков в реальной соцсети)



4) ERDiagram ("Диаграмма отношений") для БД instagram приложена в отдельном файле (в формате .png)


5) Заполняем БД данными с помощью сервиса filldb.info


Скрипты по корректировке данных после автозаполнения данных:

SELECT * FROM users LIMIT 10;

UPDATE users SET updated_at = CURRENT_TIMESTAMP WHERE created_at > updated_at;

DESC profiles;

SELECT * FROM profiles LIMIT 10;

SELECT * FROM messages LIMIT 10;

SELECT COUNT(*) FROM users;

DESC media ;


SELECT * FROM media LIMIT 10;

UPDATE media SET updated_at = CURRENT_TIMESTAMP WHERE created_at > updated_at;

DESC media_types ;

SELECT * FROM media_types mt ;

UPDATE media SET fIlename = CONCAT('https://dropbox.com/instagram/', filename);

DROP TABLE exts;

CREATE TEMPORARY TABLE exts (name VARCHAR(10));

INSERT INTO exts VALUES ('.gif'), ('.avi'), ('.jpeg');

SELECT * FROM exts;

SELECT name FROM exts ORDER BY RAND() LIMIT 1;

UPDATE media SET fIlename = 
	CONCAT(
		'https://dropbox.com/instagram/', 
		FLOOR(10000 + RAND() * 20000),
		(SELECT name FROM exts ORDER BY RAND() LIMIT 1)
		);
	
UPDATE media SET size = FLOOR(10000 + RAND() * 1000000) WHERE size < 1000;

UPDATE media SET metadata = CONCAT('{"owner":"',
	(SELECT CONCAT(first_name, ' ', last_name) FROM users WHERE id = user_id),
	'"}');

ALTER TABLE media MODIFY COLUMN metadata JSON;


Итоговый дамп заполненной таблицы с откорректированными данными приложен в виде отдельного файла - Inst_bd.dump.sql



6) Далее приведены несколько скриптов с агрегатными функциями, группировкой, JOIN'ми и проч.


-- 1) Вывод пользователей женщин, с контактной информацией, в алфавитном порядке

SELECT CONCAT(users.first_name,' ', users.last_name) AS user_full_name, users.email , users.phone 
	FROM users
		JOIN profiles
		ON profiles.gender = 'f' AND users.id = profiles.user_id
		ORDER BY user_full_name
		LIMIT 10;
	
-- 2) Вывод информации о 10 самых понравившихся медиа-файлах (больше всего лайков)

SELECT media.filename, media.size, media.metadata, COUNT(likes.id) AS total_likes
	FROM media
		JOIN likes 
		ON likes.target_id = media.id AND likes.target_type_id = '1'
		GROUP BY media.id 
		ORDER BY total_likes DESC
		LIMIT 10;
	
-- 3) Вывод Имени и фамилии 10-ти самых активных пользователях (суммарно больше всего лайков, сообщений и постов)

SELECT CONCAT(users.first_name,' ', users.last_name) AS user_full_name,
		COUNT(DISTINCT messages.id) + 
		COUNT(DISTINCT likes.id) +
		COUNT(DISTINCT posts.id) AS activity_count
		FROM users
			LEFT JOIN messages
				ON users.id = messages.from_user_id 
			LEFT JOIN likes
				ON users.id = likes.user_id 
			LEFT JOIN posts
				ON users.id = posts.user_id 
		GROUP BY users.id
		ORDER BY activity_count DESC 
		LIMIT 10;




7) Пропишем представления для нашей базы данных:

-- 1) Представление, выводящее имя медиа-файла и имя-фамилию его владельца

CREATE VIEW media_owner 
	AS SELECT media.filename, CONCAT(users.first_name, ' ', users.last_name) AS full_owners_name
	   FROM users 
		JOIN media
			ON users.id = media.user_id;
			
SELECT * FROM media_owner;


-- 2) Представление, выводящее текст сообщения и имя-фамилию его отправителя (только те сообщения, которые были доставлены)

CREATE VIEW delivered_messages 
	AS SELECT messages.body AS delivered_message, 
		  CONCAT(users.first_name, ' ', users.last_name) AS full_sender_name
	   FROM users 
		JOIN messages
			ON users.id = messages.from_user_id AND 
			   messages.is_delivered = 1;
			
SELECT * FROM delivered_messages;




8) Пропишем хранимые триггеры:

-- Прописываем триггеры на добавление новых пользователей либо обновление новых данных о пользователе.
-- Если новые или обновляемые данные содержат какие-либо незаполненные поля, то вставка/обновление отменяется
-- и сообщается об ошибке


-- Триггер на вставку

DELIMITER //
CREATE TRIGGER check_insert_users BEFORE INSERT ON users
	FOR EACH ROW 
		BEGIN
  			IF new.first_name IS NULL AND new.last_name IS NULL AND new.email IS NULL AND new.phone IS NULL
 				THEN
 			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Insert canceled';
  		END IF;
END//
DELIMITER;


-- Триггер на обновление

DELIMITER //
CREATE TRIGGER check_update_users BEFORE UPDATE ON users
	FOR EACH ROW 
		BEGIN
  			IF new.first_name IS NULL AND new.last_name IS NULL AND new.email IS NULL AND new.phone IS NULL
 				THEN
 			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Update canceled';
  		END IF;
END//
DELIMITER;
